@page "/teachers-list"
@using StudentsManagement.Client.Models
@inject NavigationManager navigation;
@inject IConfiguration config
@inject IJSRuntime JsRuntime
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Teachers</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <p><a class="btn btn-success float-end" href="/add-teacher"> Add New Teacher </a></p>
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header"></div>
                            @if (!AllTeachers.Any())
                            {
                                <p><em>Loading Teachers...</em></p>
                            }
                            @if (AllTeachers.Any())
                            {
                                <div class="card-body">
                                    <table id="example1" class="table table-bordered table-striped">
                                        <thead>
                                            <tr>
                                                <th>Id</th>
                                                <th>FirstName</th>
                                                <th>MiddleName</th>
                                                <th>LastName</th>
                                                <th>Email</th>
                                                <th>PhoneNo</th>
                                                <th>Gender</th>
                                                <th>Edit</th>
                                                <th>Details</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var parent in AllTeachers)
                                            {
                                                <tr>
                                                    <td>@parent.Id</td>
                                                    <td><img style="width:100px;height:100px" src="@parent.Photo" /></td>
                                                    <td>@parent.FirstName</td>
                                                    <td>@parent.MiddleName</td>
                                                    <td>@parent.LastName</td>
                                                    <td>@parent.EmailAddress</td>
                                                    <td>@parent.PhoneNumber</td>
                                                    <td>@parent.Gender.Description</td>
                                                    <td>
                                                        <a class="btn btn-success" href="/teacher/edit/@parent.Id"> Edit </a>
                                                    </td>
                                                    <td>
                                                        <a class="btn btn-success" href="/teacher/details/@parent.Id"> View </a>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info"> There is not Teachers List Availlable</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {

    public List<Teacher> AllTeachers { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAllTeachers();
    }

    public async Task LoadAllTeachers()
    {
        var data = await TeacherService.GetAllAsync();
        AllTeachers.Clear();
        if (data is null) return;
        foreach (var item in data)
        {
            item.Photo = GetImagePath(item.Photo);
            AllTeachers.Add(item);
        }
    }

    private void EditStudent(int id)
    {
        navigation.NavigateTo($"/student/edit/{id}");
    }

    private async Task DeleteTeacher(int Id)
    {
        var result = await TeacherService.DeleteAsync(Id);
        await LoadAllTeachers();
    }
    private string GetImagePath(string filename)
    {
        try
        {

            var imagestring = "";
            if (!string.IsNullOrEmpty(filename))
            {
                var path = Path.Combine(config.GetValue<String>("FileUploads")!, "MacroCode", filename);
                var imagebytes = File.ReadAllBytes(path);
                imagestring = Convert.ToBase64String(imagebytes);
                imagestring = string.Format("data:image/png;base64,{0}", imagestring);
            }
            return imagestring;
        }
        catch (Exception ex)
        {
            return null;
        }
    }
}
