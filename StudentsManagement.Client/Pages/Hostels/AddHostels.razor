@page "/add-hostel"
@using StudentsManagement.Client.Models
@inject NavigationManager navigation;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Authorization
@inject UserManager<ApplicationUser> usermanager;
@attribute [Authorize]

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Add New Hostel</h3>
            </div>
            <div class="card-body">
                <EditForm Model="hostelobj" OnValidSubmit="CreateHostels" FormName="addhostel">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="col-md-12">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">Hostel Name</label>
                                    <InputText for="HostelName" class="form-control" @bind-Value="@hostelobj.HostelName" />
                                    <ValidationMessage For="()=>hostelobj.HostelName" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">Hostel Address</label>
                                    <InputText for="Address" class="form-control" @bind-Value="@hostelobj.Address" />
                                    <ValidationMessage For="()=>hostelobj.Address" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">Hostel Description</label>
                                    <InputTextArea for="Description" class="form-control" @bind-Value="@hostelobj.Description" />
                                    <ValidationMessage For="()=>hostelobj.Description" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">Hostel Type</label>
                                    <InputSelect for="BookCategoryId" class="form-control" @bind-Value="@hostelobj.HostelTypeId">
                                        <option value="">Select Hostel Type</option>
                                        @foreach (var category in HostelTypeCategories)
                                        {
                                            <option value="@category.Id">@category.Description</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="()=>hostelobj.HostelTypeId" />
                                </div>
                            </div>
                        </div>
                        <div class="form-group mt-4">
                            <button type="submit" class="btn btn-primary">Save Hostel</button>
                            <button type="button" @onclick="()=>Cancel()" class="btn btn-danger">Back to List</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
@code {
    [SupplyParameterFromForm]
    public Hostel hostelobj { get; set; } = new();

    public string UserId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    List<SystemCodeDetail> HostelTypeCategories = new List<SystemCodeDetail>();

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            var currentuser = await usermanager.GetUserAsync(user);
            UserId = currentuser.Id;
        }

        HostelTypeCategories = await SystemCodeDetailService.GetByCodeAsync("HostelTypes");
    }

    protected async Task CreateHostels()
    {
        hostelobj.CreatedOn = DateTime.Now;
        hostelobj.CreatedById = UserId;
        var result = GeneralService.AddAsync<Hostel>(hostelobj);
        navigation.NavigateTo("/hostels-list");
    }
    public void Cancel()
    {
        navigation.NavigateTo("/hostels-list");
    }
}
