@layout LoginLayout
@page "/Account/Register"
@using StudentsManagement.Client.Models
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using StudentsManagement.Data
@using StudentsManagement.Client.Models
@using StudentsManagement.Components.Layout
@using StudentsManagement.Services
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>
<div class="limiter">
    <div class="container-login100">
        <div class="wrap-login100">
            <div class="login100-form-title" style="background-image: url(Login/images/bg-01.jpg);">
                <span class="login100-form-title-1">
                    Register User
                </span>
            </div>
            <StatusMessage Message="@Message" />
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" class="login100-form validate-form" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                <h2>Create a new account.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="FirstName" aria-required="true" />
                    <label for="FirstName">First Name</label>
                    <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.MiddleName" class="form-control" autocomplete="MiddleName" aria-required="true" />
                    <label for="MiddleName">Middle Name</label>
                    <ValidationMessage For="() => Input.MiddleName" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="LastName" aria-required="true" />
                    <label for="LastName">Last Name</label>
                    <ValidationMessage For="() => Input.LastName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputFile @bind-Value="Input.Photo" class="form-control" autocomplete="Photo" aria-required="true" />
                    <label for="Photo">User Photo</label>
                    <ValidationMessage For="() => Input.Photo" class="text-danger" />
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label">Gender</label>
                        <InputSelect for="GenderId" class="form-control" @bind-Value="@Input.GenderId">
                            <option value="">Select Gender</option>
                            @foreach (var type in Gender)
                            {
                                <option value="@type.Id">@type.Description</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="()=>Input.GenderId" />
                    </div>
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="confirm-password">Confirm Password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            </EditForm>
        </div>
        <div class="col-md-6 col-md-offset-2">
            <section>
                <h3>Use another service to register.</h3>
                <hr />
                <ExternalLoginPicker />
            </section>
        </div>
    </div>
</div>
@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        user.FirstName = Input.FirstName;
        user.MiddleName = Input.MiddleName;
        user.LastName = Input.LastName;
        user.Photo = Input.Photo;
        user.GenderId = Input.GenderId;
        user.LastActivityDate = DateTime.Now;
        user.IsActive = true;
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Middle Name")]
        public string MiddleName { get; set; } = "";

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";

        [Display(Name = "Photo")]
        public string Photo { get; set; } = "";

        [Required]
        [Display(Name = "Gender")]
        public int GenderId { get; set; } = 0;

        public string FullName => $"{FirstName} {MiddleName} {LastName}";

        public bool IsActive { get; set; } = true;

        public DateTime LastActivityDate { get; set; } = DateTime.Now;

        public DateTime? DeactivatedOn { get; set; }


        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
    List<SystemCodeDetail> Gender = new List<SystemCodeDetail>();

    protected override async Task OnInitializedAsync()
    {
        Gender = await SystemCodeDetailService.GetByCodeAsync("Gender");
    }
}
